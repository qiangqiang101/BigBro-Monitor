'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="LicDB")>  _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertTblLicense(instance As TblLicense)
    End Sub
  Partial Private Sub UpdateTblLicense(instance As TblLicense)
    End Sub
  Partial Private Sub DeleteTblLicense(instance As TblLicense)
    End Sub
  Partial Private Sub InsertTblUser(instance As TblUser)
    End Sub
  Partial Private Sub UpdateTblUser(instance As TblUser)
    End Sub
  Partial Private Sub DeleteTblUser(instance As TblUser)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("LicDBConnectionString1").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property TblLicenses() As System.Data.Linq.Table(Of TblLicense)
		Get
			Return Me.GetTable(Of TblLicense)
		End Get
	End Property
	
	Public ReadOnly Property TblUsers() As System.Data.Linq.Table(Of TblUser)
		Get
			Return Me.GetTable(Of TblUser)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblLicense")>  _
Partial Public Class TblLicense
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LicenseID As Integer
	
	Private _LicenseKey As String
	
	Private _CreatedDate As Date
	
	Private _ActivatedDate As System.Nullable(Of Date)
	
	Private _HWID As String
	
	Private _DeviceName As String
	
	Private _Used As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLicenseIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLicenseIDChanged()
    End Sub
    Partial Private Sub OnLicenseKeyChanging(value As String)
    End Sub
    Partial Private Sub OnLicenseKeyChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    Partial Private Sub OnActivatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnActivatedDateChanged()
    End Sub
    Partial Private Sub OnHWIDChanging(value As String)
    End Sub
    Partial Private Sub OnHWIDChanged()
    End Sub
    Partial Private Sub OnDeviceNameChanging(value As String)
    End Sub
    Partial Private Sub OnDeviceNameChanged()
    End Sub
    Partial Private Sub OnUsedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUsedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LicenseID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property LicenseID() As Integer
		Get
			Return Me._LicenseID
		End Get
		Set
			If ((Me._LicenseID = value)  _
						= false) Then
				Me.OnLicenseIDChanging(value)
				Me.SendPropertyChanging
				Me._LicenseID = value
				Me.SendPropertyChanged("LicenseID")
				Me.OnLicenseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LicenseKey", DbType:="NChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property LicenseKey() As String
		Get
			Return Me._LicenseKey
		End Get
		Set
			If (String.Equals(Me._LicenseKey, value) = false) Then
				Me.OnLicenseKeyChanging(value)
				Me.SendPropertyChanging
				Me._LicenseKey = value
				Me.SendPropertyChanged("LicenseKey")
				Me.OnLicenseKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreatedDate() As Date
		Get
			Return Me._CreatedDate
		End Get
		Set
			If ((Me._CreatedDate = value)  _
						= false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivatedDate", DbType:="DateTime")>  _
	Public Property ActivatedDate() As System.Nullable(Of Date)
		Get
			Return Me._ActivatedDate
		End Get
		Set
			If (Me._ActivatedDate.Equals(value) = false) Then
				Me.OnActivatedDateChanging(value)
				Me.SendPropertyChanging
				Me._ActivatedDate = value
				Me.SendPropertyChanged("ActivatedDate")
				Me.OnActivatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HWID", DbType:="NChar(255)")>  _
	Public Property HWID() As String
		Get
			Return Me._HWID
		End Get
		Set
			If (String.Equals(Me._HWID, value) = false) Then
				Me.OnHWIDChanging(value)
				Me.SendPropertyChanging
				Me._HWID = value
				Me.SendPropertyChanged("HWID")
				Me.OnHWIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeviceName", DbType:="NChar(50)")>  _
	Public Property DeviceName() As String
		Get
			Return Me._DeviceName
		End Get
		Set
			If (String.Equals(Me._DeviceName, value) = false) Then
				Me.OnDeviceNameChanging(value)
				Me.SendPropertyChanging
				Me._DeviceName = value
				Me.SendPropertyChanged("DeviceName")
				Me.OnDeviceNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Used", DbType:="Bit NOT NULL")>  _
	Public Property Used() As Boolean
		Get
			Return Me._Used
		End Get
		Set
			If ((Me._Used = value)  _
						= false) Then
				Me.OnUsedChanging(value)
				Me.SendPropertyChanging
				Me._Used = value
				Me.SendPropertyChanged("Used")
				Me.OnUsedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblUser")>  _
Partial Public Class TblUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As Integer
	
	Private _CreatedDate As Date
	
	Private _UserName As String
	
	Private _Password As String
	
	Private _Email As String
	
	Private _FullName As String
	
	Private _Status As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnFullNameChanging(value As String)
    End Sub
    Partial Private Sub OnFullNameChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreatedDate() As Date
		Get
			Return Me._CreatedDate
		End Get
		Set
			If ((Me._CreatedDate = value)  _
						= false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NChar(50)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me.OnFullNameChanging(value)
				Me.SendPropertyChanging
				Me._FullName = value
				Me.SendPropertyChanged("FullName")
				Me.OnFullNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Bit NOT NULL")>  _
	Public Property Status() As Boolean
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
